version: '3.8'
name: twenty

services:
  change-vol-ownership:
    image: ubuntu
    user: root
    volumes:
      - 'server-local-data:/tmp/server-local-data'
      - 'docker-data:/tmp/docker-data'
    command: |
      bash -c "chown -R 1000:1000 /tmp/server-local-data && chown -R 1000:1000 /tmp/docker-data"
    networks:
      - coolify-net
    restart: 'no'

  server:
    image: 'twentycrm/twenty:${TAG:-latest}'
    volumes:
      - server-local-data:/app/packages/twenty-server/.local-storage
      - 'docker-data:/app/docker-data'
    environment:
      NODE_PORT: 3000  # Aligned to 3000 port internally
      PG_DATABASE_URL: 'postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@${PG_DATABASE_HOST:-db}:${PG_DATABASE_PORT:-5432}/default'
      SERVER_URL: '${SERVER_URL}'
      REDIS_URL: '${REDIS_URL:-redis://redis:6379}'
      STORAGE_TYPE: '${STORAGE_TYPE}'
      STORAGE_S3_REGION: '${STORAGE_S3_REGION}'
      STORAGE_S3_NAME: '${STORAGE_S3_NAME}'
      STORAGE_S3_ENDPOINT: '${STORAGE_S3_ENDPOINT}'
      APP_SECRET: '${APP_SECRET:-replace_me_with_a_random_string}'
    labels:
      - traefik.enable=true
      - traefik.http.routers.twenty.rule=Host(`twenty.biocentra.eu`)
      - traefik.http.routers.twenty.entrypoints=https
      - traefik.http.routers.twenty.tls=true
      - traefik.http.routers.twenty.tls.certresolver=letsencrypt
      - traefik.http.services.twenty.loadbalancer.server.port=3000  # Updated to match internal port
    depends_on:
      change-vol-ownership:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    networks:
      - coolify-net
    healthcheck:
      test: 'curl --fail http://localhost:3000/healthz'
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always

  worker:
    image: 'twentycrm/twenty:${TAG:-latest}'
    volumes:
      - server-local-data:/app/packages/twenty-server/.local-storage
    command:
      - yarn
      - 'worker:prod'
    environment:
      PG_DATABASE_URL: 'postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@${PG_DATABASE_HOST:-db}:${PG_DATABASE_PORT:-5432}/default'
      SERVER_URL: '${SERVER_URL}'
      REDIS_URL: '${REDIS_URL:-redis://redis:6379}'
      DISABLE_DB_MIGRATIONS: 'true'
      STORAGE_TYPE: '${STORAGE_TYPE}'
      STORAGE_S3_REGION: '${STORAGE_S3_REGION}'
      STORAGE_S3_NAME: '${STORAGE_S3_NAME}'
      STORAGE_S3_ENDPOINT: '${STORAGE_S3_ENDPOINT}'
      APP_SECRET: '${APP_SECRET:-replace_me_with_a_random_string}'
    depends_on:
      db:
        condition: service_healthy
      server:
        condition: service_healthy
    networks:
      - coolify-net
    restart: always

  db:
    image: 'postgres:16'
    volumes:
      - 'db-data:/var/lib/postgresql/data'
    environment:
      POSTGRES_USER: '${PG_DATABASE_USER:-postgres}'
      POSTGRES_PASSWORD: '${PG_DATABASE_PASSWORD:-postgres}'
    healthcheck:
      test: 'pg_isready -U ${PG_DATABASE_USER:-postgres} -h localhost -d postgres'
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - coolify-net
    restart: always

  redis:
    image: redis
    command:
      - '--maxmemory-policy'
      - noeviction
    networks:
      - coolify-net
    restart: always

volumes:
  docker-data: null
  db-data: null
  server-local-data: null

networks:
  coolify-net:
    external: true
