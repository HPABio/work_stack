version: "3.8"

x-app-env:
  &app-env
  environment:
    - APP_RELEASE=${APP_RELEASE:-v0.25.2}
    - SERVICE_FQDN_PLANE=${SERVICE_FQDN_PLANE}
    - WEB_URL=${SERVICE_FQDN_PLANE}
    - DEBUG=${DEBUG:-0}
    - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGIN:-http://localhost}
    - GUNICORN_WORKERS=${GUNICORN_WORKERS:-1}
    - PGHOST=postgresql
    - PGDATABASE=plane
    - POSTGRES_USER=${SERVICE_USER_POSTGRES}
    - POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES}
    - POSTGRES_DB=plane
    - POSTGRES_PORT=5432
    - PGDATA=/var/lib/postgresql/data
    - DATABASE_URL=postgresql://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@postgresql:5432/plane
    - REDIS_HOST=plane-redis
    - REDIS_PORT=6379
    - REDIS_URL=${REDIS_URL:-redis://plane-redis:6379/}
    - RABBITMQ_HOST=plane-mq
    - RABBITMQ_PORT=${RABBITMQ_PORT:-5672}
    - RABBITMQ_DEFAULT_USER=${SERVICE_USER_RABBITMQ:-plane}
    - RABBITMQ_DEFAULT_PASS=${SERVICE_PASSWORD_RABBITMQ:-plane}
    - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST:-plane}
    - AMQP_URL=amqp://${SERVICE_USER_RABBITMQ}:${SERVICE_PASSWORD_RABBITMQ}@plane-mq:${RABBITMQ_PORT:-5672}/plane
    - SECRET_KEY=${SERVICE_PASSWORD_64_SECRETKEY}
    - USE_MINIO=${USE_MINIO:-1}
    - AWS_REGION=${AWS_REGION}
    - AWS_ACCESS_KEY_ID=${SERVICE_USER_MINIO}
    - AWS_SECRET_ACCESS_KEY=${SERVICE_PASSWORD_MINIO}
    - AWS_S3_ENDPOINT_URL=${AWS_S3_ENDPOINT_URL:-http://plane-minio:9000}
    - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME:-uploads}
    - MINIO_ROOT_USER=${SERVICE_USER_MINIO}
    - MINIO_ROOT_PASSWORD=${SERVICE_PASSWORD_MINIO}
    - BUCKET_NAME=${BUCKET_NAME:-uploads}
    - FILE_SIZE_LIMIT=${FILE_SIZE_LIMIT:-5242880}
    - API_BASE_URL=${API_BASE_URL:-http://api:8000}
services:
  proxy:
    image: makeplane/plane-proxy:${APP_RELEASE:-v0.25.1}
    environment:
      - SERVICE_FQDN_PLANE=${SERVICE_FQDN_PLANE}
      - FILE_SIZE_LIMIT=${FILE_SIZE_LIMIT:-5242880}
      - BUCKET_NAME=${BUCKET_NAME:-uploads}
    depends_on:
      - web
      - api
      - space
    networks:
      - coolify-net
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:80"]
      interval: 2s
      timeout: 10s
      retries: 15
    labels:
      - traefik.enable=true
      - traefik.http.routers.plane.rule=Host(`${SERVICE_FQDN_PLANE}`)
      - traefik.http.routers.plane.entrypoints=websecure
      - traefik.http.routers.plane.tls=true
      - traefik.http.routers.plane.tls.certresolver=letsencrypt
      - traefik.http.services.plane.loadbalancer.server.port=80
  web:
    image: makeplane/plane-frontend:${APP_RELEASE:-v0.25.1}
    command: node web/server.js web
    depends_on:
      - api
      - worker
    networks:
      - coolify-net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3500 || exit 1"]
      interval: 2s
      timeout: 10s
      retries: 15
  live:
    <<: *app-env
    image: makeplane/plane-live:${APP_RELEASE:-v0.25.1}
    command: node live/dist/server.js live
    depends_on:
      - api
      - web
    networks:
      - coolify-net
    restart: always
    healthcheck:
      test: ["CMD", "echo", "hey whats up"]
      interval: 2s
      timeout: 10s
      retries: 15
  api:
    <<: *app-env
    image: makeplane/plane-backend:${APP_RELEASE:-v0.25.1}
    command: ./bin/docker-entrypoint-api.sh
    volumes:
      - logs_api:/code/plane/logs
    depends_on:
      - plane-db
      - plane-redis
    networks:
      - coolify-net
    restart: always
    healthcheck:
      test: ["CMD", "echo", "hey whats up"]
      interval: 2s
      timeout: 10s
      retries: 15
  worker:
    <<: *app-env
    image: makeplane/plane-backend:${APP_RELEASE:-v0.25.1}
    command: ./bin/docker-entrypoint-worker.sh
    volumes:
      - logs_worker:/code/plane/logs
    depends_on:
      - api
      - plane-db
      - plane-redis
    networks:
      - coolify-net
    restart: always
    healthcheck:
      test: ["CMD", "echo", "hey whats up"]
      interval: 2s
      timeout: 10s
      retries: 15
  beat-worker:
    <<: *app-env
    image: makeplane/plane-backend:${APP_RELEASE:-v0.25.1}
    command: ./bin/docker-entrypoint-beat.sh
    volumes:
      - logs_beat-worker:/code/plane/logs
    depends_on:
      - api
      - plane-db
      - plane-redis
    networks:
      - coolify-net
    restart: always
    healthcheck:
      test: ["CMD", "echo", "hey whats up"]
      interval: 2s
      timeout: 10s
      retries: 15
  migrator:
    <<: *app-env
    image: makeplane/plane-backend:${APP_RELEASE:-v0.25.1}
    command: ./bin/docker-entrypoint-migrator.sh
    volumes:
      - logs_migrator:/code/plane/logs
    depends_on:
      - plane-db
      - plane-redis
    networks:
      - coolify-net
    restart: 'no'
  plane-db:
    image: postgres:15.7-alpine
    command: "postgres -c 'max_connections=1000'"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - coolify-net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 20s
      retries: 10
    environment:
      POSTGRES_USER: ${SERVICE_USER_POSTGRES}
      POSTGRES_PASSWORD: ${SERVICE_PASSWORD_POSTGRES}
      POSTGRES_DB: plane
  plane-redis:
    image: valkey/valkey:7.2.5-alpine
    volumes:
      - redisdata:/data
    networks:
      - coolify-net
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 20s
      retries: 10
  plane-mq:
    image: rabbitmq:3.13.6-management-alpine
    restart: always
    networks:
      - coolify-net
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${SERVICE_USER_RABBITMQ:-plane}
      - RABBITMQ_DEFAULT_PASS=${SERVICE_PASSWORD_RABBITMQ:-plane}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST:-plane}
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 30s
      timeout: 30s
      retries: 3
  plane-minio:
    <<: *app-env
    image: minio/minio:latest
    command: server /export --console-address ":9090"
    networks:
      - coolify-net
    volumes:
      - uploads:/export
    restart: always
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 20s
      retries: 10
volumes:
  logs_api:
  logs_worker:
  logs_beat-worker:
  logs_migrator:
  pgdata:
  redisdata:
  rabbitmq_data:
  uploads:
networks:
  coolify-net:
    external: true

