version: '3.8'

volumes:
  db_storage:
  n8n_storage:
  redis_storage:

x-shared: &shared
  restart: always
  networks:
    - coolify-net
  image: docker.n8n.io/n8nio/n8n
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_SCHEMA=public
    
    - EXECUTIONS_MODE=queue
    - QUEUE_BULL_REDIS_HOST=redis
    - QUEUE_HEALTH_CHECK_ACTIVE=true
    
    - N8N_PORT=3000
    - N8N_ENV=production
    - N8N_PROTOCOL=https
    - N8N_HOST=n8n.biocentra.eu
    - 'N8N_EDITOR_BASE_URL=https://n8n.biocentra.eu'
    - N8N_RUNNERS_ENABLED=true
    - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
    - 'WEBHOOK_URL=https://n8n.biocentra.eu'

    - GENERIC_TIMEZONE=Europe/Berlin
    - TZ=Europe/Berlin
    - NODE_ENV=production

    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
    # - PG_DATABASE_URL=postgres://${DB_POSTGRESDB_USER}:${DB_POSTGRESDB_PASSWORD}@postgres:${DB_POSTGRESDB_PORT}/${POSTGRES_DB}
    - N8N_ENCRYPTION_KEY=${ENCRYPTION_KEY}
  # links:
  #   - postgres
  #   - redis
  volumes:
    - n8n_storage:/home/node/.n8n
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:16
    networks:
      - coolify-net
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_NON_ROOT_USER=${POSTGRES_NON_ROOT_USER}
      - POSTGRES_NON_ROOT_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
    volumes:
      - db_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh:ro

    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:6-alpine
    networks:
      - coolify-net
    restart: always
    volumes:
      - redis_storage:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n:
    <<: *shared
    labels:
      - traefik.enable=true
      - 'traefik.http.routers.n8n.rule=Host("n8n.biocentra.eu")'
      - traefik.http.routers.n8n.tls.certresolver=letsencrypt
      - traefik.http.services.n8n.loadbalancer.server.port=3000
      - traefik.http.routers.n8n.entrypoints=https
    networks:
      - coolify-net


  n8n-worker:
    image: docker.n8n.io/n8nio/n8n
    command: worker
    restart: always
    networks:
      - coolify-net
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - DB_POSTGRESDB_SCHEMA=public

      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_HEALTH_CHECK_ACTIVE=true

      - GENERIC_TIMEZONE=Europe/Berlin
      - TZ=Europe/Berlin
      - NODE_ENV=production

      - N8N_ENCRYPTION_KEY=${ENCRYPTION_KEY}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

networks:
  coolify-net:
    external: true
